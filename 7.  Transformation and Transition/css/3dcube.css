body {
    background-color: #111111;
}



.container {
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    height: 1000px;
    width: 1000px;
    perspective: 1200px;

}

.cube {
    position: relative;
    width: 200px;
    height: 200px;
    transform-style: preserve-3d;
    /* this property defines how nested element are rendered in 3d space , this should be used with transform property  
    this has the follwing property
    'flat'	Specifies that child elements will NOT preserve its 3D position. This is default
    'preserve-3d'	Specifies that child elements will preserve its 3D position
    */
    transform: rotateY(0deg) rotateX(0deg);
    animation: cubeRotate 4s linear infinite;

}

@keyframes cubeRotate {
    0% {
        transform: rotateY(0deg) rotateX(0deg);
    }

    25% {
        transform: rotateY(-180deg) rotateX(-90deg);
    }

    50% {
        transform: rotateY(-390deg) rotateX(-200deg);


    }

    75% {
        transform: rotateY(-560deg) rotateX(-120deg);
    }

    100% {
        transform: rotateY(-720deg) rotateX(0deg);
    }
}

.cube>div {
    position: absolute;
    height: 100%;
    width: 100%;
    opacity: 1;
    border: 1px solid white;
    opacity: 0.5;
}

.front {
    background-color: red;
    transform: translateZ(100px);


}

.back {
    background-color: rebeccapurple;
    transform: rotateY(180deg) translateZ(100px);
}

.left {
    background-color: gray;
    transform: rotateY(-90deg) translateZ(100px);
}

.right {
    background-color: chocolate;
    transform: rotateY(90deg) translateZ(100px);
}

.top {
    background-color: orange;
    transform: rotateX(90deg) translateZ(100px);
}

.bottom {
    background-color: limegreen;
    transform: rotateX(-90deg) translateZ(100px);
}